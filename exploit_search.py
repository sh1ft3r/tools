import subprocess
import re
import json
from tabulate import tabulate
import threading
from flask import Flask, request, render_template

app = Flask(__name__)

def scan_url(url):
    try:
        result = subprocess.run(["whatweb", url], capture_output=True, text=True)
        return result.stdout
    except subprocess.CalledProcessError as e:
        return f"Error: {e}"

def extract_technologies(scan_result):
    matches = re.findall(r'(\w+)/([\d.]+)', scan_result)
    return matches

def search_exploits(tech_versions):
    results = []
    for tech, version in tech_versions:
        try:
            search_result = subprocess.run(["searchsploit", "-w", "-t", f"{tech} {version}"], capture_output=True, text=True)
            results.append((tech, version, search_result.stdout))
        except subprocess.CalledProcessError as e:
            results.append((tech, version, f"Error: {e}"))
    return results

def search_exploits_threaded(tech_versions):
    threads = []
    results = []
    for tech, version in tech_versions:
        thread = threading.Thread(target=search_exploits_single, args=(tech, version, results))
        threads.append(thread)
        thread.start()
    
    for thread in threads:
        thread.join()
    
    return results

def search_exploits_single(tech, version, results):
    try:
        search_result = subprocess.run(["searchsploit", "-w", "-t", f"{tech} {version}"], capture_output=True, text=True)
        results.append((tech, version, search_result.stdout))
    except subprocess.CalledProcessError as e:
        results.append((tech, version, f"Error: {e}"))

@app.route('/', methods=['GET', 'POST'])
def main():
    if request.method == 'POST':
        url = request.form.get('url')
        if not url:
            return "Please provide a valid URL."
        
        print("[+] Scanning WhatWeb...")
        scan_result = scan_url(url)
        print(scan_result)
        
        tech_versions = extract_technologies(scan_result)
        if not tech_versions:
            return "Nothing out of the ordinary found."
        
        print("[+] Searching for exploits...")
        exploit_results = search_exploits_threaded(tech_versions)
        headers = ['Technology', 'Version', 'Exploit Results']
        table = tabulate(exploit_results, headers=headers, tablefmt='html')
        return render_template('results.html', table=table)
    
    return render_template('index.html')

if __name__ == "__main__":
    app.run()
